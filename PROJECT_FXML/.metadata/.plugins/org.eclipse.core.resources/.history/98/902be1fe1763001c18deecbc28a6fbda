package UI_Layer;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
import java.util.ResourceBundle;

import javax.swing.JOptionPane;

import org.hibernate.Session;

import BussinessLogic.Accounts;
import BussinessLogic.Dates;
import BussinessLogic.HibernateDatabase;
import BussinessLogic.KametiMember;
import BussinessLogic.KametiOwner;
import BussinessLogic.KametiParty;
import ExceptionsHandling.AccountNotExist;
import ExceptionsHandling.PartyNotFound;
import javafx.application.Platform;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class Controller implements Initializable{
	@FXML private Button SignUpButton = new Button();
	@FXML private Button LoginButton = new Button();
	@FXML private Button LogOut = new Button();
	@FXML private Button minimize_button = new Button();
	@FXML private Button maximize_button = new Button();


	@FXML private TextField RegisterCNIC;
	@FXML private TextField RegisterFname;
	@FXML private TextField RegisterLName;
	@FXML private TextField RegisterGender;
	@FXML private TextField RegisterContactNo;
	@FXML private TextField RegisterAddress;


	@FXML private Button OwnerProfileButton = new Button();
	@FXML private Button OwnerMembersButton = new Button();
	@FXML private Button OwnerPartyDetailsButton = new Button();
	@FXML private Button OwnerAddNewPartyButton = new Button();
	@FXML private Button OwnerPaymentButton = new Button();
	@FXML private Button OwnerCalendarButton = new Button();
	@FXML private Button OwnerLogin = new Button();

    @FXML private Button MemberProfileButton;
    @FXML private Button MemberAllPartyDetailsButton;
    @FXML private Button MemberJoinAPartyButton;
    @FXML private Button MemberPaymentsButton;
    @FXML private Label MemberLabelCNIC;

    @FXML private Label MemberLabelName;
    @FXML private Label MemberLabelContactNo;
    @FXML private Label MemberLabelGender;
    @FXML private Label MemberLabelAddress;
    @FXML private Label MemberLabelRegistration_ID;
    @FXML private Label MemberLabelRegestration_Date;
    
    
    
    @FXML private AnchorPane AnchorMemberProfile;	
	
    @FXML private TextField MemberCNICInput;
	@FXML private TextField OwnerTextFieldCNIC;
	
	@FXML private TextField OwnerTextFieldName;

	@FXML private Label OwnerLabelCNIC = new Label();
	@FXML private Label OwnerLabelName = new Label();
	@FXML private Label OwnerLabelContactNo = new Label();
	@FXML private Label OwnerLabelGender = new Label();
	@FXML private Label OwnerLabelAddress = new Label();
	@FXML private Label OwnerLabelRegistration_ID = new Label();
	@FXML private Label OwnerLabelRegestration_Date = new Label();

	@FXML private Label kametiID = new Label();
	@FXML private Label kametiName = new Label();
	@FXML private Label kametiOwnerID = new Label();
	@FXML private Label kametiCapacity = new Label();
	@FXML private Label kametiTotalMembers = new Label();
	@FXML private Label KametiTimePeriod = new Label();
	@FXML private Label KametiTotalBudget = new Label();
	@FXML private Label KametiStatus = new Label();
	@FXML private Label KametiVacantSpace = new Label();
	@FXML private Label KametiInstallmentPerMonth = new Label();


	@FXML private Button Add_Party_Button;
	@FXML private TextField Add_Party_cnic;
	@FXML private TextField Add_Party_name;
	@FXML private TextField Add_Party_caoacity;
	@FXML private TextField Add_Party_Installement;
	@FXML private DatePicker Add_Party_StartDate;
	@FXML private DatePicker Add_Party_Enddate;


	@FXML private ComboBox<String> PartyIDcombobox=new ComboBox<>(); 
	@FXML private Button ShowPartyDetailButton = new Button();

    @FXML private AnchorPane AnchorMemberAllParties;
	
	
	@FXML private AnchorPane paneMain=new AnchorPane();
	@FXML private AnchorPane AnchorProfile=new AnchorPane();
	@FXML private AnchorPane AnchorMember=new AnchorPane();
	@FXML private AnchorPane AnchorPartyDetails=new AnchorPane();
	@FXML private AnchorPane AnchorAddParty=new AnchorPane();
	@FXML private AnchorPane AnchorWelcome=new AnchorPane();
	ArrayList<String> list1=new ArrayList<String>();//Kameti Member's Data
	ArrayList<String> list2=new ArrayList<String>();//Kameti Member's Data
	static String CNIC = "123";
	static String Kameti_ID = "";
	static String MemberCNIC = "";
	@FXML private ComboBox<String> combobox1=new ComboBox<>();    //to pass values to combobox
	@FXML ObservableList<String> PartyNames;

	@FXML private ScrollPane ScrollPaneMembers=new ScrollPane();
	@FXML private AnchorPane AnchorPaneMembes=new AnchorPane();

	@FXML private TableView Members_Info_Table  = new TableView();
	@FXML private TableColumn<String,KametiParty> Member_Name_Col = new TableColumn<String,KametiParty>();
	@FXML private TableColumn<Integer,KametiParty> Member_CNIC_Col = new TableColumn<Integer,KametiParty>();


	//	@FXML ObservableList<String> MemberList;
	@FXML List<KametiParty> MemberList = new ArrayList<KametiParty>();
	@FXML private TextField Candidate1 = new TextField();
	@FXML private Button ShowMemberButton = new Button();




	@FXML
	private TextArea MemberInformation = new TextArea();

	@FXML
	// When user click on the cross in the Login page
	public void RedExit(ActionEvent event) {
		int response=JOptionPane.showConfirmDialog(null, "Do you want to Exit","Confirmation",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
		if (response==JOptionPane.YES_OPTION)
		{
			Platform.exit();
			System.exit(0);
		}
	}

	@FXML
	// When user click on the cross in the Login page
	public void YellowMaximize(ActionEvent event) {
		Stage stage = (Stage) maximize_button.getScene().getWindow();
		if(stage.isMaximized()) {
			stage.setMaximized(false);	
		}
		else {
			stage.setMaximized(true);	
		}
	}

	@FXML
	// When user click on the cross in the Login page
	public void GreenMinimize(ActionEvent event) {
		Stage stage = (Stage) minimize_button.getScene().getWindow();
		stage.setIconified(true);
	}



	@FXML
	void GoToOwnerORMemberPage(ActionEvent event) {
		try {
			Stage stage = new Stage();
			Parent root = FXMLLoader.load(getClass().getResource("OwnerORMember.fxml"));
			Scene scene =  new Scene(root);
			stage = (Stage)((Node)event.getSource()).getScene().getWindow();
			stage.setScene(scene);
			stage.setTitle("Java fx Project");
			stage.show();


		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("You are in OwnerORMember page");
	}

	@FXML
	void GoToSignUpPage(ActionEvent event) {
		try {
			Stage stage = new Stage();
			Parent root = FXMLLoader.load(getClass().getResource("SignUp.fxml"));
			Scene scene =  new Scene(root);
			stage = (Stage)((Node)event.getSource()).getScene().getWindow();
			stage.setScene(scene);
			stage.setTitle("Java fx Project");
			stage.show();


		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("You are in SignUp page");
	}

	@FXML
	void GoToLoginAsMember(ActionEvent event) {
		try {
			Stage stage = new Stage();
			Parent root = FXMLLoader.load(getClass().getResource("LoginAsMember.fxml"));
			Scene scene =  new Scene(root);
			stage = (Stage)((Node)event.getSource()).getScene().getWindow();
			stage.setScene(scene);
			stage.setTitle("Java fx Project");
			stage.show();


		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("You are in LoginAsMember page");
	}

	@FXML
	void GoToLoginAsOwner(ActionEvent event) {
		try {
			Stage stage = new Stage();
			Parent root = FXMLLoader.load(getClass().getResource("LoginAsOwner.fxml"));
			Scene scene =  new Scene(root);
			stage = (Stage)((Node)event.getSource()).getScene().getWindow();
			stage.setScene(scene);
			stage.setTitle("Java fx Project");
			stage.show();


		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("You are in LoginAsOwner page");
	}

	@FXML
	void GoToOwnerHomePage(ActionEvent event) {
		CNIC = OwnerTextFieldCNIC.getText().toString();
		System.out.println("CNIC   " + CNIC);
		try {
			Stage stage = new Stage();
			Parent root = FXMLLoader.load(getClass().getResource("OwnerHomePage.fxml"));
			Scene scene =  new Scene(root);
			stage = (Stage)((Node)event.getSource()).getScene().getWindow();
			stage.setScene(scene);
			stage.setTitle("Java fx Project");
			stage.show();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("You are in OwnerHomePage page");
	}

	@FXML
	void GoToMemberHomePage(ActionEvent event) {
		MemberCNIC = MemberCNICInput.getText().toString();
		System.out.println("Member CNIC :"+MemberCNIC);
		try {
			Stage stage = new Stage();
			Parent root = FXMLLoader.load(getClass().getResource("MemberHomePage.fxml"));
			Scene scene =  new Scene(root);
			stage = (Stage)((Node)event.getSource()).getScene().getWindow();
			stage.setScene(scene);
			stage.setTitle("Java fx Project");
			stage.show();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("You are in HomePage page");
	}


	@FXML
	void SetProfileButton(ActionEvent event) throws AccountNotExist {
		int i = Integer.parseInt(CNIC);
		Accounts OwnerData = Accounts.getAccount(HibernateDatabase.getObj().getSession(),i);
		OwnerLabelCNIC.setText(CNIC);				
		OwnerLabelName.setText(OwnerData.getFName() + " " + OwnerData.getLName());
		OwnerLabelContactNo.setText(OwnerData.getContact());
		OwnerLabelGender.setText(OwnerData.getGender());
		OwnerLabelAddress.setText(OwnerData.getAddress());
		OwnerLabelRegistration_ID.setText("" + OwnerData.getRegistration_ID());
		OwnerLabelRegestration_Date.setText(OwnerData.getRegistration_Date());
		SetMemberButton(event);
	}

	@FXML
	void SetMemberButton(ActionEvent event) throws AccountNotExist {
		PartyNames= FXCollections.observableArrayList(KametiParty.getParties(HibernateDatabase.getObj(),Integer.parseInt(CNIC)));
		System.out.println("->>>>"+PartyNames);
	}
	@FXML
	void SetSignUpButton(ActionEvent event) throws AccountNotExist {
		int R_CNIC = Integer.parseInt(RegisterCNIC.getText().toString());
		System.out.println(RegisterCNIC.getText().toString());
		System.out.println(RegisterFname.getText().toString());
		System.out.println(RegisterLName.getText().toString());
		System.out.println(RegisterGender.getText().toString());
		System.out.println(RegisterContactNo.getText().toString());
		System.out.println(RegisterAddress.getText().toString());

		Accounts acc = Accounts.getAccount(HibernateDatabase.getObj().getSession(), R_CNIC);
		//	    if(acc!=null){
		//	    	System.out.println("Account is Already Created");
		//	    }  
		if(acc==null)
		{
			HibernateDatabase.getObj().getSession().save(KametiParty.register_member(R_CNIC, 
					RegisterFname.getText().toString(), RegisterLName.getText().toString()
					,RegisterAddress.getText().toString(),RegisterContactNo.getText().toString()
					,RegisterGender.getText().toString(),false));
			HibernateDatabase.getObj().getTransaction().commit();

			KametiParty.register_member(R_CNIC, 
					RegisterFname.getText().toString(), RegisterLName.getText().toString()
					,RegisterAddress.getText().toString(),RegisterContactNo.getText().toString()
					,RegisterGender.getText().toString(),false);
		}
		System.out.println("Account is Created");

		GoToOwnerORMemberPage(event);
	}


	static String PartyName = " ";
	static String PartyID = " ";
	@FXML
	void SetShowMemberButton(ActionEvent event) {
		list1.clear();
		MemberList.clear();
		Members_Info_Table.getItems().clear();
		PartyName = combobox1.getValue();
		System.out.println("Party Name   "+PartyName);
		String temp = "";
		String[] arr = PartyName.split(" ");    
		for (String ss : arr) {
			temp=ss;
			break;
		}
		System.out.println("Party ID:   " + temp);
		int kid=Integer.parseInt(temp);
		list1= KametiParty.getMembersDetails(HibernateDatabase.getObj(),kid);
		System.out.println("Member Data" + list1);

		ListIterator<String> i = list1.listIterator();
		String DATA = "",OwnerCnic="",OwnerName="";
		int count=0;

		Members_Info_Table.getColumns().clear();

		while(i.hasNext()) {
			DATA = i.next();
			//System.out.println("Value: "+":     :" + DATA);
			String temp2 = "";
			String[] arr2 = DATA.split(" ");    
			for (String ss : arr2) {
				if (count==0)
				{
					OwnerCnic=ss;
				}
				if (count==1){
					OwnerName=ss;
					KametiParty KP = new KametiParty(OwnerName,Integer.parseInt(OwnerCnic));
					MemberList.add(KP);
					System.out.println("OwnerCnic   " + OwnerCnic+"OwnerName      "+OwnerName);				
				}
				count++;
				temp=ss;
				temp2 = "";
			}
			count=0;
		}
		Member_Name_Col.setCellValueFactory(new PropertyValueFactory<>("KametiName"));
		Member_CNIC_Col.setCellValueFactory(new PropertyValueFactory<>("Owner_cinc"));
		Members_Info_Table.getColumns().add(Member_CNIC_Col);
		Members_Info_Table.getColumns().add(Member_Name_Col);

		System.out.println("Member List "+MemberList);
		for(KametiParty KP1 : MemberList) {
			Members_Info_Table.getItems().add(KP1);
		}

		AnchorPaneMembes.getChildren().addAll(Members_Info_Table);
		ScrollPaneMembers.setContent(AnchorPaneMembes);

	}

	public void SetPartyDetailsButton(ActionEvent event) {
		PartyID = PartyIDcombobox.getValue();
		System.out.println("Party Name   "+PartyID);
		String temp = "";

		String[] arr = PartyID.split(" ");    
		for (String ss : arr) {
			temp=ss;
			break;
		}
		System.out.println("Party ID:   " + temp);
		int kid=Integer.parseInt(temp);
		list2= KametiParty.getPartyDetails(HibernateDatabase.getObj(),kid);
		System.out.println("Party Data" + list2);
		ListIterator<String> i = list2.listIterator();
		String DATA = "";
		int count=0;
		String tempDate = "";
		while(i.hasNext()) {
			DATA = i.next();
			System.out.println("Value: "+":     :" + DATA);
			String temp2 = "";
			String[] arr2 = DATA.split(" ");    
			for (String ss : arr2) {
				if (count==0){
					kametiID.setText(ss);
				}
				else if (count==1){
					kametiName.setText(ss);
				}
				else if (count==2){
					kametiOwnerID.setText(ss);
				}
				else if (count==3){
					kametiCapacity.setText(ss);
				}
				else if (count==4){
					kametiTotalMembers.setText(ss);
				}
				else if (count==5){
					tempDate = ss;	
				}
				else if (count==6){
					KametiTimePeriod.setText(ss + " " + tempDate);
				}
				else if (count==7){
					KametiTotalBudget.setText(ss);
				}
				else if (count==8){
					KametiStatus.setText(ss);
				}
				else if (count==9){
					KametiVacantSpace.setText(ss);
				}
				else if (count==10){
					KametiInstallmentPerMonth.setText(ss);
				}
				count++;
				temp=ss;
				temp2 = "";
			}
			count=0;
		}	
	}

	public void SetAddPartyButton(ActionEvent event) {
		System.out.println(Add_Party_Button.getText().toString());
		System.out.println(Add_Party_cnic.getText().toString()); 
		System.out.println(Add_Party_name.getText().toString()); 
		System.out.println(Add_Party_caoacity.getText().toString()); 
		System.out.println(Add_Party_Installement.getText().toString()); 
		System.out.println(Add_Party_StartDate.getValue()); 
		System.out.println(Add_Party_Enddate.getValue()); 
		KametiParty acc=null;

		KametiParty kp=new KametiParty(Add_Party_name.getText().toString());
		kp.setCapecity(Integer.parseInt(Add_Party_caoacity.getText().toString()));
		kp.setInstallment_per_month(Integer.parseInt(Add_Party_Installement.getText().toString()));
		kp.setVacant_Position(Integer.parseInt(Add_Party_caoacity.getText().toString()));
		kp.setStatus("Active");
		kp.setOwner_cinc(Integer.parseInt(Add_Party_cnic.getText().toString()));



		ArrayList<KametiParty> pr = new ArrayList<KametiParty>();
		pr.add(kp);
		Dates d=new Dates(Add_Party_StartDate.getValue().toString(),Add_Party_Enddate.getValue().toString(),"11/1/12","11/1/12","11/1/12","11/1/12");
		kp.setDates(d);
		HibernateDatabase.getObj().getSession().save(kp);
		KametiOwner owner =KametiOwner.getAccount(HibernateDatabase.getObj(),Integer.parseInt(Add_Party_cnic.getText().toString()));

		int cnic = Integer.parseInt(Add_Party_cnic.getText().toString());
		Accounts acc1 = null;
		try {
			acc1 = Accounts.getAccount(HibernateDatabase.getObj().getSession(), cnic);
		} catch (AccountNotExist e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if(owner==null){ 
			owner=new KametiOwner(acc1,pr,cnic);
			HibernateDatabase.getObj().getSession().save(owner);
		}
		else
		{
			owner.setParties(kp);
			HibernateDatabase.getObj().getSession().update(owner);
		}
		HibernateDatabase.getObj().getTransaction().commit();
	}



	@FXML
	void OwnerTabButtons(ActionEvent event) throws AccountNotExist {
		if (event.getSource() == OwnerProfileButton) {
			AnchorProfile.toFront();
			SetProfileButton(event);
		}
		else if (event.getSource() == OwnerMembersButton) {
			AnchorMember.toFront();
			SetShowMemberButton(event);
		}
		else if (event.getSource() == OwnerPartyDetailsButton) {
			AnchorPartyDetails.toFront();
			SetPartyDetailsButton(event);
		}

		else if (event.getSource() == OwnerAddNewPartyButton) {
			Add_Party_cnic.clear();
			Add_Party_name.clear();
			Add_Party_caoacity.clear();
			Add_Party_Installement.clear();
			Add_Party_StartDate.getEditor().clear();
			Add_Party_Enddate.getEditor().clear();
			AnchorAddParty.toFront();

		}
		else if (event.getSource() == OwnerPaymentButton) {

		}
		else if (event.getSource() == OwnerCalendarButton) {

		}
	}
	
	@FXML
	void SetMemberProfileButton(ActionEvent event) throws AccountNotExist {
		int i = Integer.parseInt(MemberCNIC);
		Accounts MemberData = Accounts.getAccount(HibernateDatabase.getObj().getSession(),i);
		
		MemberLabelCNIC.setText(MemberCNIC);				
		MemberLabelName.setText(MemberData.getFName() + " " + MemberData.getLName());
		MemberLabelContactNo.setText(MemberData.getContact());
		MemberLabelGender.setText(MemberData.getGender());
		MemberLabelAddress.setText(MemberData.getAddress());
		MemberLabelRegistration_ID.setText("" + MemberData.getRegistration_ID());
		MemberLabelRegestration_Date.setText(MemberData.getRegistration_Date());
		
		System.out.println(MemberLabelName.getText().toString());
		System.out.println(MemberLabelContactNo.getText().toString());
		System.out.println(MemberLabelGender.getText().toString());
		System.out.println(MemberLabelAddress.getText().toString());
		System.out.println(MemberLabelRegistration_ID.getText().toString());
		System.out.println(MemberLabelRegestration_Date.getText().toString());
		
//		SetMemberButton(event);
	}
	
	
	
	
	
	@FXML
	void MemberTabButtons(ActionEvent event) throws AccountNotExist {
		if (event.getSource() == MemberProfileButton) {
			AnchorMemberProfile.toFront();
			SetMemberProfileButton(event);
		}
		else if (event.getSource() == MemberAllPartyDetailsButton) {
			AnchorMemberAllParties.toFront();
			SetMemberProfileButton(event);
		}
	}
	
	
	
	
	
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {

		// TODO Auto-generated method stub
		Toggle_Switch button =new Toggle_Switch();
		SimpleBooleanProperty isOn=button.switchOnProperty();
		isOn.addListener((observable,oldValue,newValue)->{
			if(newValue) {
				button.getScene().getRoot().getStylesheets().add(getClass().getResource("application.css").toString());

			}
			else
			{
				button.getScene().getRoot().getStylesheets().remove(getClass().getResource("application.css").toString());
			}
		});
		paneMain.getChildren().add(button);




		PartyNames= FXCollections.observableArrayList(KametiParty.getParties(HibernateDatabase.getObj(),Integer.parseInt(CNIC)));
		System.out.println(PartyNames);
		combobox1.setItems(PartyNames);
		PartyIDcombobox.setItems(PartyNames);
	}
	private void populateTable(ObservableList<KametiParty> listM2) {
		// TODO Auto-generated method stub
		//		Members_Info_Table.setItems(listM2);
	}

}
