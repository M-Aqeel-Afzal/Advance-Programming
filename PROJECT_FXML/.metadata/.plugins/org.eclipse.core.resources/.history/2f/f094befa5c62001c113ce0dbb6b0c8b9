package BussinessLogic;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;

import DatabaseLayer.Filehandling;
import ExceptionsHandling.MemberAllreadyExist;
import ExceptionsHandling.PartyCapecityIsFull;
import ExceptionsHandling.PartyNotFound;
@Entity
@Table(name="KametiParty")
public class KametiParty  {  
	private static final AtomicInteger count = new AtomicInteger(0);
	private String KametiName;
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private int Kameti_ID;
	private int Owner_cinc;
	private int Capecity;
	private int Total_Members;
	private double installment_per_month;
	private double Total_Balance;
	private int vacant_Position;
	private String Status;


	@Embedded
	private Dates dates;
	@ManyToMany
	private List<KametiMember> Members;
	public KametiParty()
	{
		Capecity = 0;
		Total_Members = 0;
		this.vacant_Position = 0;
		Members=new  ArrayList<KametiMember>();
	}
	public String getStatus() {
		return Status;
	}
	public void setStatus(String status) {
		Status = status;
	}
	public List<KametiMember> getMembers() {
		return Members;
	}
	public void setMembers(KametiMember members) throws PartyCapecityIsFull, MemberAllreadyExist {
		if(this.Total_Members==this.Capecity)
		{
			throw new PartyCapecityIsFull("Capecity is Full!");
		}
		else
		{
			CriteriaBuilder builder = HibernateDatabase.getSession().getCriteriaBuilder();
			CriteriaQuery<KametiParty> criteria = builder.createQuery(KametiParty.class);
			criteria.from(KametiParty.class);
			List<KametiParty> entityList = HibernateDatabase.getSession().createQuery(criteria).getResultList();

			for (KametiParty e : entityList) {
				if(e.Kameti_ID==members.getKameti_ID())
				{
					Iterator<KametiMember> it = e.Members.iterator();


					while(it.hasNext())
					{
						if(it.next().getKameti_ID()==members.getKameti_ID())
							throw new MemberAllreadyExist("Member Allready exits");
					}


				}
			}

			this.Total_Members++;
			this.vacant_Position--;
			Members.add(members);
		}
	}
	public double getInstallment_per_month() {
		return installment_per_month;
	}
	public void setInstallment_per_month(double installment_per_month) {
		this.installment_per_month = installment_per_month;
	}
	public KametiParty(String name)
	{KametiName = name;
	Capecity = 0;
	Total_Members = 0;
	this.vacant_Position = 0;

	}
	public KametiParty(String kametiName, int capecity, double ins,int total_Members, int vacantPosition,Dates d,int owner_cnic) {
		KametiName = kametiName;
		Capecity = capecity;
		Total_Members = total_Members;
		vacant_Position = vacantPosition;
		Total_Balance=0;
		dates=d;
		installment_per_month=ins;
		Owner_cinc=owner_cnic;
		Kameti_ID = count.incrementAndGet();
		Filehandling.Parties_info(this);
	}
	public int getOwner_cinc() {
		return Owner_cinc;
	}
	public void setOwner_cinc(int owner_cinc) {
		Owner_cinc = owner_cinc;
	}
	public void setTotal_Balance(double total_Balance) {
		Total_Balance = total_Balance;
	}
	public Dates getDates() {
		return dates;
	}
	public void setDates(Dates dates) {
		this.dates = dates;
	}
	public double getTotal_Balance() {
		return Total_Balance;
	}
	public void addTotal_Balance(double balance) {
		Total_Balance += balance;
	}
	public double withdrawTotal_Balance() {
		double b=Total_Balance;
		Total_Balance =0;
		return b;
	}
	public String getKametiName() {
		return KametiName;
	}
	public void setKametiName(String kametiName) {
		KametiName = kametiName;
	}
	public int getKameti_ID() {
		return Kameti_ID;
	}
	public void setKameti_ID(int kameti_ID) {
		Kameti_ID = kameti_ID;
	}
	public int getCapecity() {
		return Capecity;
	}
	public void setCapecity(int capecity) {
		Capecity = capecity;
	}
	public int getTotal_Members() {
		return Total_Members;
	}
	public void setTotal_Members(int total_Members) {
		Total_Members = total_Members;
	}
	public int getVacant_Position() {
		return vacant_Position;
	}
	public void setVacant_Position(int vacant_Position) {
		this.vacant_Position = vacant_Position;
	}
	public static Accounts register_member(int cnic,String fn,String ln,String addr,String cont,String gen,boolean FileFlag)
	{
		int Rid = count.incrementAndGet();
		String date=java.time.LocalDate.now().toString();
		Accounts register_member= new Accounts(cnic, fn, ln, addr, cont, gen,Rid,date,FileFlag);
		return register_member;
	}

	static public KametiParty getParty(int id) throws PartyNotFound
	{
		CriteriaBuilder builder = HibernateDatabase.getSession().getCriteriaBuilder();
		CriteriaQuery<KametiParty> criteria = builder.createQuery(KametiParty.class);
		criteria.from(KametiParty.class);
		List<KametiParty> entityList = HibernateDatabase.getSession().createQuery(criteria).getResultList();

		for (KametiParty e : entityList) {
			if(e.getKameti_ID()==id)
			{

				return e;
			}
		}
		throw new PartyNotFound("Party not Found!");
	}
	static void ShowParties()
	{
		// Create CriteriaBuilder
		CriteriaBuilder builder = HibernateDatabase.getSession().getCriteriaBuilder();

		// Create CriteriaQuery
		CriteriaQuery<KametiParty> criteria = builder.createQuery(KametiParty.class);

		// Specify criteria root
		criteria.from(KametiParty.class);

		// Execute query
		List<KametiParty> entityList = HibernateDatabase.getSession().createQuery(criteria).getResultList();

		for (KametiParty e : entityList) {
			System.out.println("Kameti Party ID: "+e.Kameti_ID);
			System.out.println("Kameti Party KametiName: "+e.KametiName);
			System.out.println("Kameti Party Capecity: "+e.Capecity);
			System.out.println("Kameti Party Total_Members: "+e.Total_Members);
			System.out.println("Kameti Party vacant_Position: "+e.vacant_Position);
			e.dates.ShowDates();
		}

	}

	static public ArrayList<String> getParties(int cnic)
	{
		// Create CriteriaBuilder
		ArrayList<String> list1=new ArrayList<>();
		CriteriaBuilder builder = HibernateDatabase.getSession().getCriteriaBuilder();

		// Create CriteriaQuery
		CriteriaQuery<KametiParty> criteria = builder.createQuery(KametiParty.class);

		// Specify criteria root
		criteria.from(KametiParty.class);

		// Execute query
		List<KametiParty> entityList = HibernateDatabase.getSession().createQuery(criteria).getResultList();

		for (KametiParty e : entityList) {
			if(e.Owner_cinc==cnic)
			{
				list1.add(e.Kameti_ID+" "+e.KametiName);
			}
		}
		return list1;

	}



	static public ArrayList<String> getPartyDetails(int kid)
	{
		// Create CriteriaBuilder
		ArrayList<String> list1=new ArrayList<>();
		CriteriaBuilder builder = HibernateDatabase.getSession().getCriteriaBuilder();

		// Create CriteriaQuery
		CriteriaQuery<KametiParty> criteria = builder.createQuery(KametiParty.class);

		// Specify criteria root
		criteria.from(KametiParty.class);

		// Execute query
		List<KametiParty> entityList = HibernateDatabase.getSession().createQuery(criteria).getResultList();

		for (KametiParty e : entityList) {
			if(e.Kameti_ID==kid)
			{
				list1.add(e.Kameti_ID+" "+e.KametiName+" "+e.Owner_cinc+e.Capecity+" "+e.Total_Members+" "+e.dates.getCreation_Date()+" "+e.dates.getDeadline()+" "+e.Total_Balance+" "+e.Status);
			}
		}
		return list1;

	}


	static public ArrayList<String> getMembersDetails(int kid)
	{

		ArrayList<String> list1=new ArrayList<>();
		CriteriaBuilder builder = HibernateDatabase.getSession().getCriteriaBuilder();
		CriteriaQuery<KametiParty> criteria = builder.createQuery(KametiParty.class);
		criteria.from(KametiParty.class);
		List<KametiParty> entityList = HibernateDatabase.getSession().createQuery(criteria).getResultList();

		for (KametiParty e : entityList) {
			if(e.Kameti_ID==kid)
			{

				CriteriaBuilder builder1 = HibernateDatabase.getSession().getCriteriaBuilder();
				CriteriaQuery<KametiMember> criteria1 = builder1.createQuery(KametiMember.class);
				criteria1.from(KametiMember.class);
				List<KametiMember> entityList1 = HibernateDatabase.getSession().createQuery(criteria1).getResultList();
				for (KametiMember e1 : entityList1) {
					if(e1.getKameti_ID()==e.Kameti_ID)
					{



						CriteriaBuilder builder2 = HibernateDatabase.getSession().getCriteriaBuilder();
						CriteriaQuery<Accounts> criteria2 = builder2.createQuery(Accounts.class);
						criteria2.from(Accounts.class);
						List<Accounts> entityList2 = HibernateDatabase.getSession().createQuery(criteria2).getResultList();
						for (Accounts e2 : entityList2) {
							if(e2.getCNIC()==e1.getMember_cnic())
							{
								list1.add(e1.getMember_cnic()+" "+e2.getFName()+" "+e2.getLName());
							}
						}






					}
				}
			}
		}
		return list1;

	}

	static void ShowPartiesofMember(int cnic)
	{
		// Create CriteriaBuilder
		CriteriaBuilder builder = HibernateDatabase.getSession().getCriteriaBuilder();

		// Create CriteriaQuery
		CriteriaQuery<KametiMember> criteria = builder.createQuery(KametiMember.class);

		// Specify criteria root
		criteria.from(KametiMember.class);

		// Execute query
		List<KametiMember> entityList = HibernateDatabase.getSession().createQuery(criteria).getResultList();

		for (KametiMember e : entityList) {
			if(e.getMember_cnic()==cnic)
			{
				int kid=e.getKameti_ID();
				// Create CriteriaBuilder
				CriteriaBuilder builder1 = HibernateDatabase.getSession().getCriteriaBuilder();

				// Create CriteriaQuery
				CriteriaQuery<KametiParty> criteria1= builder1.createQuery(KametiParty.class);

				// Specify criteria root
				criteria1.from(KametiParty.class);

				// Execute query
				List<KametiParty> entityList1 = HibernateDatabase.getSession().createQuery(criteria1).getResultList();
				for (KametiParty k : entityList1) {

					if(k.getKameti_ID()==kid)
					{
						System.out.println("Kameti Party ID: "+k.Kameti_ID);
						System.out.println("Kameti Party KametiName: "+k.KametiName);
						System.out.println("Kameti Party Total Balance: "+k.Total_Balance);
						System.out.println("Kameti Party Installment per month: "+k.installment_per_month+"\n\n\n");

					}
				}

			}

		}
	}
}